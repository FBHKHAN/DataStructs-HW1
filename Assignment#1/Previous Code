//
//  main.cpp
//  Assignment#1
//
//  Created by Farooq Khan on 2/4/16.
//  Copyright Â© 2016 Farooq Khan. All rights reserved.
//

#include <iostream>
#include <fstream>
#include <iomanip>
#include "Customer.hpp"
#include "Record.hpp"

using namespace std;

int main()
{

ifstream masterAccountFile;
ifstream transRecordFile;
ofstream newMasterFile;

masterAccountFile.open("masterAccountsData");
transRecordFile.open("transcationRecord");
newMasterFile.open("newMaster");

if(!transRecordFile.good()){
cout << "transaction Record file not found" << endl;
}

if (!masterAccountFile.good()) {
cout << "Master Account File not found..." << endl;
}

Customer customer;

Record record;
char transactionType;
double SumOfPayments;
int previousCustomerNumber;

while (masterAccountFile >> customer.customer_Number) {

masterAccountFile >> customer.name;
masterAccountFile >> customer.balanceDue;

cout << "*******************************************" << endl;
cout << "Name: " << customer.name << "\t\t\t" << "#" << customer.customer_Number << endl;
cout << "\n\t\t\t" << "Previous Balance: $";
cout << setprecision(2) << fixed << customer.balanceDue << endl << endl;

while (transRecordFile >> transactionType) {

int customerNumberThisTransaction = NULL;

if (transactionType == 'P'){

record.rec_Type = Payment;
}
else if (transactionType == 'O') {

record.rec_Type = Order;
}

transRecordFile >> record.transactionNumber;
transRecordFile >> customerNumberThisTransaction;

if (record.rec_Type == Payment ) {

transRecordFile >> record.paymentAmount;

}else if(record.rec_Type == Order){

transRecordFile >> record.itemName;
transRecordFile >> record.quantity;
transRecordFile >> record.paymentAmount;
}

if (customerNumberThisTransaction == customer.customer_Number)
{
if (record.rec_Type == Payment) {
customer.balanceDue -= record.paymentAmount;
cout << record.transactionNumber;
cout <<  "\t\tPayment: $" << record.paymentAmount << endl;
}
else if(record.rec_Type == Order) {
customer.balanceDue += (record.paymentAmount*record.quantity);
cout << record.transactionNumber;
cout <<"\t" <<  record.itemName << " x " << record.quantity << "  @ $" << record.paymentAmount*record.quantity << endl;
}
}

}

cout << "\n\t\t\tBalance Due: $" << (customer.balanceDue-SumOfPayments) << endl << endl;
transRecordFile.clear();
transRecordFile.seekg(0);


newMasterFile << customer.customer_Number;
newMasterFile << "\t\t" << customer.name;
newMasterFile << "\t\t" << customer.balanceDue << endl;

}

transRecordFile.close();
masterAccountFile.close();
newMasterFile.close();
return 0;
}
